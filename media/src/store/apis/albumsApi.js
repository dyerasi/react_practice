import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { faker } from "@faker-js/faker";

//DEV ONLY!! Check loading and network requests
const pause = (duration) => {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
};

//RTK is heavy duty: covers a lot, but lots of boiler-plate
//creating an api with RTK auto-generates slices, action creators, thunks, hooks
const albumsApi = createApi({
  reducerPath: "albums", //think of as key
  baseQuery: fetchBaseQuery({
    //abstraction of fetch command
    baseUrl: "http://localhost:3005",
    fetchFn: async (...args) => {
      //DEV ONLY!!!!
      await pause(1000);
      return fetch(...args);
    },
  }),
  endpoints(builder) {
    return {
      removeAlbum: builder.mutation({
        invalidatesTags: (result, error, album) => {
          return [{ type: "Album", id: album.id }];
        },
        query: (album) => {
          return {
            url: `/albums/${album.id}`,
            method: "DELETE",
          };
        },
      }),
      fetchAlbums: builder.query({
        //fetchAlbums name genrerates custom hooks with this base name

        //redux store keeps track of network requests and results
        //removes duiplicate requests
        //using tag system to see if data is stale
        //after addAlbum, data in store is stale, so mark stale and automatically
        //todo this: in addAlbum have invalidatesTags field
        //re-issue requests to get current data

        //need to tag by userId so only speficic user fetch gets automatically done
        //otherwise all open user tabs will re-issue fetch albums command
        providesTags: (result, error, user) => {
          const tags = result.map((album) => {
            return { type: "Album", id: album.id };
          });
          tags.push({ type: "UsersAlbums", id: user.id });
          return tags;
        },

        //basUrl?userId=user (no body)
        query: (user) => {
          return {
            url: "/albums",
            params: {
              userId: user.id,
            },
            method: "GET",
          };
        },
      }),
      addAlbum: builder.mutation({
        //after new album added to db,
        //set alnum tag for fetchAlbums as stale
        //then rtk will autoissue fetchAlbums for up-to-date data

        invalidatesTags: (result, error, arg) => {
          return [{ type: "UsersAlbums", id: arg.id }];
        },
        query: (user) => {
          //not actual query, just telling rtk what params in request
          return {
            url: "/albums",
            method: "POST",
            body: {
              userId: user.id,
              title: faker.commerce.productName(),
            },
          };
        },
      }),
    };
  },
});

export const {
  useFetchAlbumsQuery,
  useAddAlbumMutation,
  useRemoveAlbumMutation,
} = albumsApi; //autogenerated
export { albumsApi };
